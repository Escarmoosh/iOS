//
//  DisplayCardViewController.swift
//  Escarmoosh
//
//  Created by Arnaud Verrier on 21/01/2019.
//  Copyright (c) 2019 escarmoosh. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol DisplayCardDisplayLogic: class
{
    func displayInformation(viewModel: DisplayCard.Information.ViewModel)
    func displayCompetences(viewModel: DisplayCard.Information.ViewModel)
}

class DisplayCardViewController: UITableViewController, DisplayCardDisplayLogic
{
    var interactor: DisplayCardBusinessLogic?
    var router: (NSObjectProtocol & DisplayCardRoutingLogic & DisplayCardDataPassing)?
    
    @IBOutlet var cardInformation: GeneriqueCardInformationView!
    @IBOutlet weak var competence1Information: GeneriqueCompetenceInformationView!
    @IBOutlet weak var competence2Information: FakeCompetenceInformationView!
    @IBOutlet weak var competence3Information: FakeCompetenceInformationView!
    @IBOutlet weak var competence4Information: FakeCompetenceInformationView!
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = DisplayCardInteractor()
        let presenter = DisplayCardPresenter()
        let router = DisplayCardRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        interactor.cardWorker = CardWorker(cardStore: CardFakker())
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        startWithAFirstCard()
    }
    
    // MARK: Do something
    
    func startWithAFirstCard()
    {
        let request = DisplayCard.Information.Request(id: "0")
        interactor?.fetchCard(request: request)
    }
    
    func displayInformation(viewModel: DisplayCard.Information.ViewModel)
    {
        cardInformation.display(viewModel: viewModel)
    }
    
    func displayCompetences(viewModel: DisplayCard.Information.ViewModel) {
        competence1Information.display(viewModel: viewModel.competences[0])
        competence2Information.display(viewModel: viewModel.competences[1])
        competence3Information.display(viewModel: viewModel.competences[2])
        competence4Information.display(viewModel: viewModel.competences[3])
    }
}

